{"ast":null,"code":"/* istanbul ignore file */\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): dom/polyfill.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport { getUID } from '../util/index';\nlet find = Element.prototype.querySelectorAll;\nlet findOne = Element.prototype.querySelector; // MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\n\nconst defaultPreventedPreservedOnDispatch = (() => {\n  const e = new CustomEvent('Bootstrap', {\n    cancelable: true\n  });\n  const element = document.createElement('div');\n  element.addEventListener('Bootstrap', () => null);\n  e.preventDefault();\n  element.dispatchEvent(e);\n  return e.defaultPrevented;\n})();\n\nconst scopeSelectorRegex = /:scope\\b/;\n\nconst supportScopeQuery = (() => {\n  const element = document.createElement('div');\n\n  try {\n    element.querySelectorAll(':scope *');\n  } catch (_) {\n    return false;\n  }\n\n  return true;\n})();\n\nif (!supportScopeQuery) {\n  find = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelectorAll(selector);\n    }\n\n    const hasId = Boolean(this.id);\n\n    if (!hasId) {\n      this.id = getUID('scope');\n    }\n\n    let nodeList = null;\n\n    try {\n      selector = selector.replace(scopeSelectorRegex, `#${this.id}`);\n      nodeList = this.querySelectorAll(selector);\n    } finally {\n      if (!hasId) {\n        this.removeAttribute('id');\n      }\n    }\n\n    return nodeList;\n  };\n\n  findOne = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelector(selector);\n    }\n\n    const matches = find.call(this, selector);\n\n    if (typeof matches[0] !== 'undefined') {\n      return matches[0];\n    }\n\n    return null;\n  };\n}\n\nexport { find, findOne, defaultPreventedPreservedOnDispatch };","map":{"version":3,"sources":["E:/reactjs/node_modules/bootstrap/js/src/dom/polyfill.js"],"names":["getUID","find","Element","prototype","querySelectorAll","findOne","querySelector","defaultPreventedPreservedOnDispatch","e","CustomEvent","cancelable","element","document","createElement","addEventListener","preventDefault","dispatchEvent","defaultPrevented","scopeSelectorRegex","supportScopeQuery","_","selector","test","hasId","Boolean","id","nodeList","replace","removeAttribute","matches","call"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,QAAuB,eAAvB;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAACC,SAAR,CAAkBC,gBAA7B;AACA,IAAIC,OAAO,GAAGH,OAAO,CAACC,SAAR,CAAkBG,aAAhC,C,CAEA;;AACA,MAAMC,mCAAmC,GAAG,CAAC,MAAM;AACjD,QAAMC,CAAC,GAAG,IAAIC,WAAJ,CAAgB,WAAhB,EAA6B;AACrCC,IAAAA,UAAU,EAAE;AADyB,GAA7B,CAAV;AAIA,QAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;AACAF,EAAAA,OAAO,CAACG,gBAAR,CAAyB,WAAzB,EAAsC,MAAM,IAA5C;AAEAN,EAAAA,CAAC,CAACO,cAAF;AACAJ,EAAAA,OAAO,CAACK,aAAR,CAAsBR,CAAtB;AACA,SAAOA,CAAC,CAACS,gBAAT;AACD,CAX2C,GAA5C;;AAaA,MAAMC,kBAAkB,GAAG,UAA3B;;AACA,MAAMC,iBAAiB,GAAG,CAAC,MAAM;AAC/B,QAAMR,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;;AAEA,MAAI;AACFF,IAAAA,OAAO,CAACP,gBAAR,CAAyB,UAAzB;AACD,GAFD,CAEE,OAAOgB,CAAP,EAAU;AACV,WAAO,KAAP;AACD;;AAED,SAAO,IAAP;AACD,CAVyB,GAA1B;;AAYA,IAAI,CAACD,iBAAL,EAAwB;AACtBlB,EAAAA,IAAI,GAAG,UAAUoB,QAAV,EAAoB;AACzB,QAAI,CAACH,kBAAkB,CAACI,IAAnB,CAAwBD,QAAxB,CAAL,EAAwC;AACtC,aAAO,KAAKjB,gBAAL,CAAsBiB,QAAtB,CAAP;AACD;;AAED,UAAME,KAAK,GAAGC,OAAO,CAAC,KAAKC,EAAN,CAArB;;AAEA,QAAI,CAACF,KAAL,EAAY;AACV,WAAKE,EAAL,GAAUzB,MAAM,CAAC,OAAD,CAAhB;AACD;;AAED,QAAI0B,QAAQ,GAAG,IAAf;;AACA,QAAI;AACFL,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,OAAT,CAAiBT,kBAAjB,EAAsC,IAAG,KAAKO,EAAG,EAAjD,CAAX;AACAC,MAAAA,QAAQ,GAAG,KAAKtB,gBAAL,CAAsBiB,QAAtB,CAAX;AACD,KAHD,SAGU;AACR,UAAI,CAACE,KAAL,EAAY;AACV,aAAKK,eAAL,CAAqB,IAArB;AACD;AACF;;AAED,WAAOF,QAAP;AACD,GAtBD;;AAwBArB,EAAAA,OAAO,GAAG,UAAUgB,QAAV,EAAoB;AAC5B,QAAI,CAACH,kBAAkB,CAACI,IAAnB,CAAwBD,QAAxB,CAAL,EAAwC;AACtC,aAAO,KAAKf,aAAL,CAAmBe,QAAnB,CAAP;AACD;;AAED,UAAMQ,OAAO,GAAG5B,IAAI,CAAC6B,IAAL,CAAU,IAAV,EAAgBT,QAAhB,CAAhB;;AAEA,QAAI,OAAOQ,OAAO,CAAC,CAAD,CAAd,KAAsB,WAA1B,EAAuC;AACrC,aAAOA,OAAO,CAAC,CAAD,CAAd;AACD;;AAED,WAAO,IAAP;AACD,GAZD;AAaD;;AAED,SACE5B,IADF,EAEEI,OAFF,EAGEE,mCAHF","sourcesContent":["/* istanbul ignore file */\n\n/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.0.0-alpha1): dom/polyfill.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getUID } from '../util/index'\n\nlet find = Element.prototype.querySelectorAll\nlet findOne = Element.prototype.querySelector\n\n// MSEdge resets defaultPrevented flag upon dispatchEvent call if at least one listener is attached\nconst defaultPreventedPreservedOnDispatch = (() => {\n  const e = new CustomEvent('Bootstrap', {\n    cancelable: true\n  })\n\n  const element = document.createElement('div')\n  element.addEventListener('Bootstrap', () => null)\n\n  e.preventDefault()\n  element.dispatchEvent(e)\n  return e.defaultPrevented\n})()\n\nconst scopeSelectorRegex = /:scope\\b/\nconst supportScopeQuery = (() => {\n  const element = document.createElement('div')\n\n  try {\n    element.querySelectorAll(':scope *')\n  } catch (_) {\n    return false\n  }\n\n  return true\n})()\n\nif (!supportScopeQuery) {\n  find = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelectorAll(selector)\n    }\n\n    const hasId = Boolean(this.id)\n\n    if (!hasId) {\n      this.id = getUID('scope')\n    }\n\n    let nodeList = null\n    try {\n      selector = selector.replace(scopeSelectorRegex, `#${this.id}`)\n      nodeList = this.querySelectorAll(selector)\n    } finally {\n      if (!hasId) {\n        this.removeAttribute('id')\n      }\n    }\n\n    return nodeList\n  }\n\n  findOne = function (selector) {\n    if (!scopeSelectorRegex.test(selector)) {\n      return this.querySelector(selector)\n    }\n\n    const matches = find.call(this, selector)\n\n    if (typeof matches[0] !== 'undefined') {\n      return matches[0]\n    }\n\n    return null\n  }\n}\n\nexport {\n  find,\n  findOne,\n  defaultPreventedPreservedOnDispatch\n}\n"]},"metadata":{},"sourceType":"module"}